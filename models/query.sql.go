// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package models

import (
	"context"
)

const getAnswers = `-- name: GetAnswers :many
SELECT id, question_id, body, is_correct, created_at, updated_at FROM answers WHERE question_id = ANY($1::bigint[])
ORDER BY created_at DESC
`

func (q *Queries) GetAnswers(ctx context.Context, ids []int64) ([]Answer, error) {
	rows, err := q.db.Query(ctx, getAnswers, ids)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Answer
	for rows.Next() {
		var i Answer
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.Body,
			&i.IsCorrect,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getQuestionById = `-- name: GetQuestionById :one
SELECT id, body, created_at, updated_at FROM questions WHERE id = $1
`

func (q *Queries) GetQuestionById(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRow(ctx, getQuestionById, id)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getQuestions = `-- name: GetQuestions :many
SELECT id, body, created_at, updated_at FROM questions
`

func (q *Queries) GetQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.Query(ctx, getQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(
			&i.ID,
			&i.Body,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

type InsertAnswersParams struct {
	Body       string
	QuestionID int64
	IsCorrect  bool
}

const insertQuestion = `-- name: InsertQuestion :one
INSERT INTO questions (body) VALUES ($1) RETURNING id, body, created_at, updated_at
`

func (q *Queries) InsertQuestion(ctx context.Context, body string) (Question, error) {
	row := q.db.QueryRow(ctx, insertQuestion, body)
	var i Question
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
